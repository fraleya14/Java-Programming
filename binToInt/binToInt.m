//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: binToInt.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "binToInt.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/StringTokenizer.h"

@implementation binToInt

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  binToInt_mainWithNSStringArray_(args);
}

+ (void)initBinWithIntArray:(IOSIntArray *)binToInt {
  binToInt_initBinWithIntArray_(binToInt);
}

+ (void)inputBinWithIntArray:(IOSIntArray *)binToInt {
  binToInt_inputBinWithIntArray_(binToInt);
}

+ (void)outputIntWithIntArray:(IOSIntArray *)binToInt {
  binToInt_outputIntWithIntArray_(binToInt);
}

- (instancetype)init {
  binToInt_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "mainWithNSStringArray:", "main", "V", 0x9, NULL, NULL },
    { "initBinWithIntArray:", "initBin", "V", 0x8, NULL, NULL },
    { "inputBinWithIntArray:", "inputBin", "V", 0x8, NULL, NULL },
    { "outputIntWithIntArray:", "outputInt", "V", 0x8, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _binToInt = { 2, "binToInt", NULL, NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_binToInt;
}

@end

void binToInt_mainWithNSStringArray_(IOSObjectArray *args) {
  binToInt_initialize();
  IOSIntArray *binToInt = [IOSIntArray arrayWithLength:32];
  binToInt_initBinWithIntArray_(binToInt);
  binToInt_inputBinWithIntArray_(binToInt);
  binToInt_outputIntWithIntArray_(binToInt);
}

void binToInt_initBinWithIntArray_(IOSIntArray *binToInt) {
  binToInt_initialize();
  for (jint i = 0; i < 32; i++) {
    *IOSIntArray_GetRef(nil_chk(binToInt), i) = 0;
  }
}

void binToInt_inputBinWithIntArray_(IOSIntArray *binToInt) {
  binToInt_initialize();
  JavaIoInputStreamReader *instr = [new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in_)) autorelease];
  JavaIoBufferedReader *stdin_ = [new_JavaIoBufferedReader_initWithJavaIoReader_(instr) autorelease];
  JavaUtilStringTokenizer *stok;
  jint num;
  NSString *value;
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) printlnWithNSString:@"Input a 32 digit binary code. "];
    [JreLoadStatic(JavaLangSystem, out_) println];
    value = [stdin_ readLine];
    [JreLoadStatic(JavaLangSystem, out_) println];
    stok = [new_JavaUtilStringTokenizer_initWithNSString_(value) autorelease];
    while ([stok hasMoreTokens]) {
      for (jint i = 0; i < 32; i++) {
        num = JavaLangInteger_parseIntWithNSString_([stok nextToken]);
        jint z = num;
        if (z == 0 || z == 1) {
          *IOSIntArray_GetRef(nil_chk(binToInt), i) = z;
          if (z == 1) {
            if (i == 0 || i == 8 || i == 16 || i == 24) {
              *IOSIntArray_GetRef(binToInt, i) = 128;
            }
            if (i == 1 || i == 9 || i == 17 || i == 25) {
              *IOSIntArray_GetRef(binToInt, i) = 64;
            }
            if (i == 2 || i == 10 || i == 18 || i == 26) {
              *IOSIntArray_GetRef(binToInt, i) = 32;
            }
            if (i == 3 || i == 11 || i == 19 || i == 27) {
              *IOSIntArray_GetRef(binToInt, i) = 16;
            }
            if (i == 4 || i == 12 || i == 20 || i == 28) {
              *IOSIntArray_GetRef(binToInt, i) = 8;
            }
            if (i == 5 || i == 13 || i == 21 || i == 29) {
              *IOSIntArray_GetRef(binToInt, i) = 4;
            }
            if (i == 6 || i == 14 || i == 22 || i == 30) {
              *IOSIntArray_GetRef(binToInt, i) = 2;
            }
            if (i == 7 || i == 15 || i == 23 || i == 31) {
              *IOSIntArray_GetRef(binToInt, i) = 1;
            }
          }
          if (z == 0) {
            *IOSIntArray_GetRef(binToInt, i) = 0;
          }
        }
        if (z > 1) {
          [JreLoadStatic(JavaLangSystem, out_) printlnWithNSString:@"*Error only input 1's and 0's* Restart Program."];
        }
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
    JavaLangSystem_exitWithInt_(-1);
  }
}

void binToInt_outputIntWithIntArray_(IOSIntArray *binToInt) {
  binToInt_initialize();
  jint a = 0;
  jint b = 0;
  jint c = 0;
  jint d = 0;
  for (jint i = 0; i < 8; i++) {
    a += IOSIntArray_Get(nil_chk(binToInt), i);
  }
  for (jint i = 8; i < 16; i++) {
    b += IOSIntArray_Get(nil_chk(binToInt), i);
  }
  for (jint i = 16; i < 24; i++) {
    c += IOSIntArray_Get(nil_chk(binToInt), i);
  }
  for (jint i = 24; i < 32; i++) {
    d += IOSIntArray_Get(nil_chk(binToInt), i);
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) printlnWithNSString:JreStrcat("ICICICI", a, '.', b, '.', c, '.', d)];
}

void binToInt_init(binToInt *self) {
  NSObject_init(self);
}

binToInt *new_binToInt_init() {
  binToInt *self = [binToInt alloc];
  binToInt_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(binToInt)
